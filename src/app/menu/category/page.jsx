"use client";

import React, { useEffect, useState } from "react";
import LabelWithIcon from "@/components/LableWithIcon";
import Modal from "@/components/Modal";
import { toast } from "react-toastify";
import { getAllCategories, createCategory, updateCategory, deleteCategory } from "@/service/dishCategory";
import { DataGrid } from "@mui/x-data-grid";

const Page = () => {
  const storeData = typeof window !== "undefined" ? localStorage.getItem("store") : null;
  const storeId = storeData ? JSON.parse(storeData)?._id : null;

  const [categories, setCategories] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [categoryName, setCategoryName] = useState("");
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const fetchCategories = async () => {
    try {
      setIsLoading(true);
      const res = await getAllCategories({ storeId });
      setCategories(res?.data || []);
    } catch (err) {
      toast.error("L·ªói khi t·∫£i danh m·ª•c");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (storeId) fetchCategories();
  }, [storeId]);

  const handleCreateCategory = async (e) => {
    e.preventDefault();
    if (!categoryName.trim()) return;

    try {
      await createCategory({ storeId, name: categoryName });
      toast.success("T·∫°o danh m·ª•c th√†nh c√¥ng");
      setIsModalOpen(false);
      setCategoryName("");
      await fetchCategories();
    } catch (err) {
      toast.error("T·∫°o danh m·ª•c th·∫•t b·∫°i");
      console.error(err);
    }
  };

  const handleUpdateCategory = async () => {
    if (!categoryName.trim() || !selectedCategory) return;

    try {
      await updateCategory({
        categoryId: selectedCategory._id,
        name: categoryName,
      });
      toast.success("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng");
      setIsModalOpen(false);
      setCategoryName("");
      setSelectedCategory(null);
      await fetchCategories();
    } catch (err) {
      toast.error("C·∫≠p nh·∫≠t danh m·ª•c th·∫•t b·∫°i");
      console.error(err);
    }
  };

  const handleDeleteCategory = async () => {
    if (!selectedCategory) return;

    try {
      await deleteCategory({ categoryId: selectedCategory._id });
      toast.success("X√≥a danh m·ª•c th√†nh c√¥ng");
      setIsDeleteModalOpen(false);
      setSelectedCategory(null);
      await fetchCategories();
    } catch (err) {
      toast.error("X√≥a danh m·ª•c th·∫•t b·∫°i");
      console.error(err);
    }
  };

  const columns = [
    { field: "name", headerName: "T√™n danh m·ª•c", flex: 1 },
    {
      field: "actions",
      headerName: "H√†nh ƒë·ªông",
      sortable: false,
      filterable: false,
      renderCell: (params) => (
        <div className='flex space-x-2'>
          <button
            onClick={() => {
              setSelectedCategory(params.row);
              setCategoryName(params.row.name);
              setIsModalOpen(true);
            }}
            className='text-blue-500'
          >
            ‚úèÔ∏è
          </button>
          <button
            onClick={() => {
              setSelectedCategory(params.row);
              setIsDeleteModalOpen(true);
            }}
            className='text-red-500'
          >
            üóëÔ∏è
          </button>
        </div>
      ),
    },
  ];

  return (
    <>
      {/* Modal th√™m/s·ª≠a */}
      <Modal
        open={isModalOpen}
        onClose={() => {
          setIsModalOpen(false);
          setSelectedCategory(null);
        }}
        onConfirm={selectedCategory ? handleUpdateCategory : handleCreateCategory}
        title={selectedCategory ? "C·∫≠p nh·∫≠t danh m·ª•c" : "Th√™m danh m·ª•c"}
        confirmTitle='L∆∞u'
        closeTitle='H·ªßy'
      >
        <form onSubmit={selectedCategory ? handleUpdateCategory : handleCreateCategory}>
          <input
            type='text'
            value={categoryName}
            onChange={(e) => setCategoryName(e.target.value)}
            placeholder='Nh·∫≠p t√™n danh m·ª•c'
            className='w-full p-2 border rounded-md mb-4'
            required
          />
        </form>
      </Modal>

      {/* Modal x√≥a */}
      <Modal
        open={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onConfirm={handleDeleteCategory}
        title='X√°c nh·∫≠n x√≥a'
        confirmTitle='X√≥a'
        closeTitle='H·ªßy'
      >
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?</p>
      </Modal>

      {/* Thanh toolbar */}
      <div className='flex justify-between items-center border-b pb-2 mx-4'>
        <LabelWithIcon title='Th√™m' iconPath='/assets/plus.png' onClick={() => setIsModalOpen(true)} />
      </div>

      {/* DataGrid */}
      <DataGrid
        rows={categories.map((c) => ({ id: c._id, ...c }))}
        columns={columns}
        pageSize={10}
        rowsPerPageOptions={[5, 10, 20]}
        disableRowSelectionOnClick
        loading={isLoading}
      />
    </>
  );
};

export default Page;
